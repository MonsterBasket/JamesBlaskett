@import url('https://fonts.googleapis.com/css2?family=Metamorphous&display=swap'); /* font-family: 'Metamorphous', cursive; */

:root{
    --orange1: #613310; /* primary   - darkest grey */
    --grey1: #7D7D7D; /* secondary */
    --grey2: #ABABAB; /* highlight - lightest grey */
    --purp1: #1A0A33; /* primary   - darkest purple */
    --purp2: #280A4A; /* primary */
    --purp3: #300A62; /* primary */
    --blue1: #35007D; /* secondary */
    --blue2: #4300A3; /* secondary */
    --blue3: #7a21ff; /* highlight - lightest blue */
}
body{
    margin: 0;
    background-color: var(--purp1);
    color: var(--grey2);
}
a, a:active, a:visited{
    color: var(--blue3);
    text-decoration: none;
}
h1, h2, h3, h4, h5, h6, p, a, article{
    font-family: 'Metamorphous';
    font-weight: lighter;
}
h1{
    font-size: 50px;
}
h2{
    font-size: 40px;
}
h3{
    margin-block-start: 2em;
    font-size: 30px;
}
h6{
    margin-block-start: -6em;
}
header{
    position: absolute;
    width: 100%;
    top: 0%;
    height: calc(var(--posTop) + var(--stickyTop)); 
    background: linear-gradient(0deg, var(--purp1), var(--blue1), #35007D00 70%), 
                linear-gradient(135deg, var(--grey1), var(--blue1), #35007D00 40%), 
                linear-gradient(220deg, var(--orange1), var(--purp2), #35007D00 60%);;
    z-index: 4;
}
.intro{
    position: absolute;
    width: 45%;
    left: 15%;
    top: 15%;
    text-align: center;
}
.intro p{
    text-align: left;
}
.blogButton{
    border: none;
    position: absolute;
    overflow: hidden;
    width: 175px;
    left: 106vh;
    top: 8%;
    background:url(./images/3x3.png) 100%;
    clip-path: polygon(48% 93%, 48% 81%, 30% 85%, 32% 80%, 23% 78%, 17% 73%, 5% 67%, 19% 60%, 11% 50%, 8% 42%, 14% 42%, 12% 33%, 13% 26%, 12% 19%, 23% 25%, 28% 26%, 37% 34%, 39% 23%, 46% 14%, 51% 3%, 55% 13%, 60% 20%, 63% 33%, 69% 26%, 80% 25%, 88% 20%, 86% 33%, 86% 38%, 85% 44%, 90% 44%, 79% 58%, 86% 62%, 95% 63%, 84% 71%, 80% 76%, 69% 79%, 72% 82%, 66% 85%, 58% 84%, 52% 82%, 53% 94%);
    aspect-ratio: 1 / 1;
    display: inline-block;
    animation: blogleaf 2s ease-in-out alternate infinite;
    transition: left 0.5s;
}
@keyframes blogleaf{
    0%    { transform:translate(9px, -11px) rotate(225deg);}
    100%      { transform:translate(22px, 11px) rotate(209deg);}
}
[type=radio]{
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
}
[type=radio] + .blogButton{
    cursor: pointer;
}
[type=radio]:checked + .blogButton{
    clip-path: polygon(44% 100%, 33% 100%, 22% 100%, 13% 100%, 7% 97%, 3% 93%, 0 87%, 0 73%, 0 53%, 0 45%, 0 31%, 0 13%, 3% 7%, 7% 3%, 13% 0, 20% 0, 28% 0, 35% 0, 44% 0, 51% 0, 59% 0, 68% 0, 77% 0, 87% 0, 93% 3%, 97% 7%, 100% 13%, 100% 18%, 100% 31%, 100% 40%, 100% 48%, 100% 56%, 100% 63%, 100% 72%, 100% 87%, 97% 93%, 93% 97%, 87% 100%, 78% 100%, 68% 100%, 55% 100%);
    transition: clip-path 1s;
    left: 25vh;
    transition: left 0.5s;
    animation: blogCenter 0.5s forwards;
}
@keyframes blogCenter{
    0%      { transform:translate(-15px, 2px) rotate(225deg);}
    100%    { transform:translate(0px, 214px) rotate(360deg) scale(4);}

}
.treeParent, .treeParent2{
    width:100%;
    position: absolute;
    overflow: hidden;
    background: red;
}
.treeParent{
    height: 100%;
}
.treeParent2{
    height: 100%;
    z-index: 5;
}
.tree1, .tree2{
    height: 100%;
    aspect-ratio: 1 / 1;
    position:relative;
}
.tree1{
    background: linear-gradient(105deg, var(--purp2), var(--blue1));           
    animation: sway 2s ease-in-out alternate infinite;
}
.tree2{
    background: red;
}
.tree2.top{
    height: var(--stickyTop);
    width: 100%;
}
.tree2.mid{
    height: var(--stickyHeight);
    width: calc(100% - var(--stickyWidth) - var(--posRight));
}
.tree2.bot{
    height: 2000px; /* (remaining content can live in this div) */
    width: 100%;
}
@keyframes sway{
    0%      { clip-path: polygon(0% 100%, 0% 63%, 2% 55%, 2% 46%, 0% 34%, 0% 13%, 1% 9%, 1.5% 3%, 0.5% 0%, 0% 0%, 2% 0%, 3% 5%, 3% 9%, 4% 12%, 6% 9%, 7% 5%, 9% 1%, 11% 0%,     13% 0%, 11% 1%, 9% 5%, 8% 11%, 10% 14%, 14% 15%, 19% 14%, 22% 11%, 23% 5%, 25% 0%, 26% 0%, 24% 5%, 24% 9%, 26% 8%, 31% 5%, 35% 4%, 40% 4%, 42% 2%,     44% 0%, 45.5% 0%, 42% 4%, 48% 5%, 54% 5%, 59% 5%, 66% 4%, 71% 3%, 75% 3.5%, 82% 6%, 81% 6.5%, 73% 5%, 69.5% 5.5%, 69% 6%, 73% 8%, 76% 9%, 81% 9%, 79% 10%, 74% 10%,     70% 8.5%, 67% 7%, 63% 6%, 58% 7%, 53% 7%, 49% 7.5%, 44% 7%, 35% 8.5%, 31% 10%, 28% 12%, 20% 19%, 12% 22%, 11% 24%, 11% 37%, 13% 44%, 15% 46%,     17% 51%, 17% 57%, 16% 57%, 16% 51%, 14% 47%, 12.5% 46.5%, 11% 47.6%, 10% 52%, 11% 55%, 13% 58%, 15% 58%, 16% 57%, 17% 57%, 15% 62%, 14% 67%, 13% 75%, 14% 82%, 17% 91%,  22% 96%, 32% 98%, 43% 98%, 56% 96%, 63% 94.5%, 70% 94.5%, 76% 96%, 83% 99%, 86% 100%, 74% 100%, 69% 98%, 62% 98%, 55% 100%);}
    100%    { clip-path: polygon(0% 100%, 0% 63%, 2% 55%, 2% 46%, 0% 34%, 0% 13%, 1% 9%, 1.5% 3%, 0.5% 0%, 0% 0%, 2% 0%, 3% 5%, 3% 9%, 4% 12%, 6% 9%, 7% 5%, 9% 1%, 11% 0%,     13% 0%, 11% 1%, 9% 5%, 8% 11%, 10% 14%, 14% 15%, 19% 14.2%, 22.1% 11.1%, 23.2% 5.1%, 25.4% 0%, 26.4% 0%, 24.3% 5%, 24.1% 9.2%, 26.1% 8.4%, 31.7% 5.2%, 35.8% 4.4%, 40.2% 4.4%, 42.4% 2.2%,     44.5% 0%, 46% 0%, 42.4% 4.3%, 48% 5.5%, 54% 5.5%, 59% 5.6%, 66% 4.6%, 71% 3.6%, 75% 4.2%, 82% 6.7%, 81% 7.3%, 73% 5.7%, 69.5% 6.3%, 69% 6.7%, 73% 8.7%, 76% 9.7%, 81% 9.7%, 79% 10.7%, 74% 10.7%,     70% 9.2%, 67% 7.7%, 63% 6.6%, 58% 7.6%, 53% 7.5%, 49% 7.9%, 44% 7.4%, 35% 8.8%, 31% 10.3%, 28% 12.2%, 20% 19.1%, 12% 22%, 11% 24%, 11% 37%, 13% 44%, 15% 46%,     17% 51%, 17% 57%, 16% 57%, 16% 51%, 14% 47%, 12.5% 46.5%, 11% 47.6%, 10% 52%, 11% 55%, 13% 58%, 15% 58%, 16% 57%, 17% 57%, 15% 62%, 14% 67%, 13% 75%, 14% 82%, 17% 91%,     22% 96%, 32% 98%, 43% 98%, 56% 96%, 63% 94.5%, 70% 94.5%, 76% 96%, 83% 99%, 86% 100%, 74% 100%, 69% 98%, 62% 98%, 55% 100%);}
}
/*#region ---------------- Start Stickies -----------------*/

/* -------------------- Read Me 1: usage --------------------
This implementation results in a non-full screen page by page window (I'm sure there's better terminology, but that's what I'm going with).

1. Moving the stickies:  There are 4 variables in :root that are used to move and size the content frame.  If you wish position it from the left
        instead of the right, search for #leftNotRight for everything you'll need to edit.
2. Covering the stickies:  .coverTop and .coverBottom cover a small amount of overflow.  You can add customised images into them if you don't want
        a solid colour background.  Just make sure to line up any content above and below.
3. Sticky content: There are currently three stickies.  You'll need to add content into the relevant sections in the HTML file.  You've also got 
        some space available below for styling.
4. Side content: To make it static, just add it as a child to the slider and position it left of right.  To make it scroll, add it as a child to the
        slider ABOVE, and set it's bottom position down about 2x --stickyHeight.
5. Background: There's a div (<article>) in place and two preset (but as yet untested) image holders, just fill in the URL and uncomment whichever
        you want.  (Note that for scrolling, the height will be several 000 px.
6. More stickies: It's possible, but you'll have to create the divs (remember, they go bottom to top), add a variable for each extra set, edit the
        current --slider3 and --lastSlider calculations, and add your new tags into several places in the uneditable section.

  */
/* -------------------- Read Me 2: scalability (technical, not useful) -------
I finally have a full scalable solution!  As long as you use vw/vh or px and not %, then everything works as it should... The issue is due to
fixed backgrounds, however you can't use the work around unless you commit to ONLY using % values.   -   (fixed background work-around https://codepen.io/monsterbasket/pen/abYdaLK?editors=1100)

The --coverBottom is tricky.  It needs to allow for different screen sizes and fill the whole gap from the bottom of the content to the bottom
of the screen.  It ALSO needs to be higher than --stickyHeight, or else things will show when you scroll past the stickies.  As the highest
standard screens are 1080 or 1440, you only need --stickyHeight + --stickyTop to be above 600 or so before content starts to show with any
automatic calculations.  I've gone with a default value of 1000px.  You're going to need higher content than that to allow the stickies to 
fully scroll off the screen anyway, then you're better off just covering with other content.

What this means is to not put any content or backgrounds directly into body, but fill the screen with other content, even if they're just for
background images.  As mentioned, make sure any content above or below is at z-index 4 or higher to ensure it covers the content as it scrolls.
However keep in mind that these are STICKIES!  So any content below will either need to start at or below --lastSlider or else they'll visibly 
scroll over --coverBottom.  (if that's what you want, start content 8 pixels higher (border blur) than --slider3 instead.
*/

:root{ /* These do need to be available to other content for screen width adjustments etc. */
    --posTop: 150vh;   /* Top position, wherever you want (but lower than stickyTop) */
    --posRight: 10vw;     /* Right position, wherever you want, but has to be in px or vw (#leftNotRight - change name) */
    --stickyTop: 12.5vh;    /* height it'll stop at (from top of screen) */
    --stickyHeight: 30vw; /* height of content box */
    --stickyWidth: 30vw;  /* width, but note that I've used vw for both - I want it square */
    /* more variables in the uneditable section - they're calculated */
}
.coverTop{
    background-color: var(--purp1); /* must match page background.  Gradients are possible,
    as are images, but need to calculate absolute value of matching image
    (top of image = .stickies top + stickyTop + image height) */
}
.coverBottom{
    background-color: var(--purp1); /* similar to above but in reverse.  As mentioned earlier
    it's easier to just have full width content cover the overlap, just make sure it's > z-index 3  */
}
.stickyBackground{
    background-color: var(--purp1);
    /* background: url(./images/backgroundGoesHere.jpg) left 0px top var(--stickyTop)/100vw var(--stickyHeight) fixed; */    /* static background    */
    /* background: url(./images/backgroundGoesHere.jpg) left 0px top var(--posTop)/100vw var(--slider3) absolute; */    /* scrolling background */
}
article.slider1{
    background:url(./images/treeRoad.jpg) right var(--posRight) top var(--stickyTop)/var(--stickyHeight) var(--stickyWidth);
    background-attachment: fixed; 
}
article.slider2{
    background:url(./images/graffiti.gif) ;
    background-size: 100%;
}
.slider2 div{ 
    display: inline-block;
    position: relative;
    left: -265px;
    bottom: -1000px;
}
article.slider3{
    background:url(./images/MachuPichu.jpg);
    background-size: 100%;
}
/* #endregion ------ end of editable sticky data ---- */
/* #region  ------- Open if you dare - (stickies uneditable) ----- */
/* The ONLY thing you may need to edit are to remove width and left in the top two rules */
.stickies{ 
    --stickyBottom: calc(var(--stickyTop) + var(--stickyHeight)); /* Bottom of content, used for --coverBottom that covers the content scrolling up from the bottom */
    --coverBottom: 1000px; /* see notes on scalability */
    --slider1: calc(var(--stickyHeight) + 500px);   /*| These are the content size plus about 500px to make each section */
    --slider2: calc(var(--slider1) * 2);            /*| stay still for a while so you don't scroll past accidentally */
    --slider3: calc(var(--slider1) * 3.5);          /*| If you want the last slider to scroll up, rather than be scrolled over,
    then change this to slider1 x3.  I like it how it is though, but works much better especially for redtrail that I currently have in there */
    --lastSlider: calc(var(--stickyHeight) * 6 + var(--coverBottom));   /*3840px;  /* slider1 x 3 + coverBottom  */
}
.stickies article.coverContainer{
    width: 100%; /* comment out this and the next to make it fit the content */
    left: 0%;
}
.stickies article.coverContainer2{
    width: 100%; /* as above, but for the bottom */
    left: 0%; /* as above */
}
.stickies{
    position: absolute;
    top: var(--posTop); 
    width: 100%;
}
.stickies article{
    top: var(--stickyTop); 
    width: 100%;
}
.stickies .coverTop{ 
    top: 0%; /*overwrites ".stickies article" above*/
    height: var(--stickyTop); /* fills the gap between top of screen and content */
}
.stickies .coverTop, .stickies .coverBottom{
    position:sticky;
    z-index: 3; /* all content below stickies must be z-index 3 or higher */
    box-shadow: 0px 0px 4px 4px var(--purp1);
}
.stickyBackground{
    position: absolute;
    left: 0px;
    top: var(--posTop);
    width: 100vw;
    height: var(--stickyHeight);
}
.stickies .coverBottom{
    top: var(--stickyBottom); /* stop at BOTTOM of sticky content */
    height: var(--coverBottom); 
}
.coverBottom .coverLeft{
    right: calc(var(--posRight) + var(--stickyWidth)); /* Need to swap these two appropriately if positioning from the left (#leftNotRight)*/
}                                                       /*  |   */
.coverBottom .coverRight{                               /*  |   */
    right: var(--posRight);                 /*  <-----------I   */    
}
.coverBottom .coverLeft, .coverBottom .coverRight{
    width:0px;
    height:var(--stickyHeight);
    position: absolute;
    display: inline-block;
    top: calc(0px - var(--stickyHeight));
    box-shadow: 0px 0px 4px 4px var(--purp1);
}
.stickies .sliderContainer1, .stickies .sliderContainer2, .stickies .sliderContainer3, .stickies .coverContainer, .stickies .coverContainer2{
    position:absolute;
    width: var(--stickyWidth);
    right: var(--posRight);
}
.slider1, .slider2, .slider3{
    position: sticky;
    height: var(--stickyHeight); /* They don't HAVE to be the same size, but it's easier */
}
.sliderContainer1{
    height: var(--slider1);
}
.sliderContainer2{
    height: var(--slider2);
}
.sliderContainer3{
    height: var(--slider3);
}
.coverContainer{
    height: var(--lastSlider);
}
.coverContainer2{
    height: var(--lastSlider);
}

/*#endregion ------------- end stickies ----------------*/


/*#region ------------ start redtrail ---------------*/

#redContainer{
    width: 100%;
    height: 100%;
    display: grid;
    grid-template-columns: repeat(20,1fr); /* technically this could be non-square, just need */
    grid-template-rows: repeat(20,1fr); /* to adjust the number of divs created in the script */
    overflow: hidden;
    justify-items: center;
    align-items: center;
}
#redSibling{
    position: absolute;
    top: 0px;
    color: white;
    text-align: center;
    font-size: 4em;
}
#redSibling{
    animation: plsWait 15s forwards;
}
#redContainer mark{
    width: 100%;
    height: 100%;
    margin: 0%;
    z-index: 0;
    background-color: var(--purp2);
}
#redContainer div{
    margin: 0%;
    z-index: 0;
    background: url(./images/MontStMichel.jpg) no-repeat right var(--posRight) top var(--stickyTop)/var(--stickyWidth) var(--stickyHeight) fixed;
}
@keyframes plsWait{  /* putting a "loading" cover over the interactive divs while the initial animation plays */
    0%      {z-index: 2; opacity: 1;}
    90%     {color: white;}
    95%     {z-index: 2; opacity: 1; color: rgba(255, 255, 255, 0);}
    100%    {z-index: -100; opacity: 0;}
}
@keyframes fade {
    0%      { opacity: 1; z-index: -100; width: 100%; height: 100%; border-radius: 20%;}
    10%     { opacity: 0;                width:  20%; height:  20%; border-radius: 50%;}
    40%     { opacity: 0; z-index: 1;}
    95%     { opacity: 0.4;              width:  80%; height:  80%; border-radius: 20%;}
    100%    { opacity: 1;                width: 100%; height: 100%; border-radius:  0%;}
}
@keyframes trigger { /* instantly puts the div to the back to trigger the standard animation */
    0%      { z-index: 0;}   /* That means I can have an "on hover" animation even if the mouse */
    100%    { z-index: -100;}   /* leaves the div, rather than having to keep the mouse on top while the animation plays */
}

#redContainer div{
animation: fade 15s linear forwards;
}
#redContainer div:hover {
animation: trigger 0s forwards;
}
/*#endregion ------------ end redtrail -----------------*/